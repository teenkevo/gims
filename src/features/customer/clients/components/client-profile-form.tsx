"use client";

// Core
import { useFormContext } from "react-hook-form";

// Components
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import Formheader from "@/components/form-header";
import FormSpacerWrapper from "@/components/form-spacer-wrapper";
import type { ALL_CLIENTS_QUERYResult } from "../../../../../sanity.types";
import { cn } from "@/lib/utils";

interface ClientProfileFormProps {
  isSubmitting: boolean;
  clients: ALL_CLIENTS_QUERYResult;
}

export function ClientProfileForm({
  isSubmitting,
  clients,
}: ClientProfileFormProps) {
  const {
    control,
    formState: { errors },
  } = useFormContext();

  const prefix = `C-`;
  // TODO: InternalID should be unique

  return (
    <FormSpacerWrapper>
      <h2 className="text-2xl font-semibold md:text-3xl tracking-tight">
        Create a new client profile
      </h2>

      <FormItem className="mb-10">
        <div className="flex flex-col py-4 space-y-4">
          <FormField
            control={control}
            name="internalId"
            rules={{ required: "Client internal ID is required" }}
            render={({ field }) => (
              <FormItem>
                <FormLabel required>Client Internal ID</FormLabel>

                <FormControl>
                  <div className="relative">
                    {prefix && (
                      <div className="absolute text-sm left-3 top-1/2 -translate-y-1/2 font-bold select-none">
                        {prefix}
                      </div>
                    )}
                    <Input
                      disabled
                      {...field}
                      value={field.value.replace(prefix, "")}
                      onChange={(e) => {
                        const newValue = e.target.value;
                        field.onChange(prefix + newValue);
                      }}
                      className={cn(
                        prefix && "pl-[calc(0.5rem_+_var(--prefix-length))]"
                      )}
                      style={
                        {
                          "--prefix-length": `${prefix.length}ch`,
                        } as React.CSSProperties
                      }
                    />
                  </div>
                </FormControl>
                <FormDescription>
                  Autogenerated unique identifier for the client.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={control}
            name="clientName"
            rules={{ required: "Client name is required" }}
            render={({ field }) => (
              <FormItem>
                <FormLabel required>Client Name</FormLabel>
                <FormControl>
                  <Input
                    autoFocus
                    disabled={isSubmitting}
                    placeholder="e.g. Acme Corporation"
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      </FormItem>
    </FormSpacerWrapper>
  );
}
