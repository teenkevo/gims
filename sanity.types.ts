/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  priority?: "noPriority" | "urgent" | "high" | "medium" | "low";
  startDate?: string;
  endDate?: string;
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "client";
  };
  stagesCompleted?: Array<string>;
};

export type Client = {
  _id: string;
  _type: "client";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  phoneNumber?: string;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Slug
  | Project
  | Client
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/clients/getAllClients.ts
// Variable: ALL_CLIENTS_QUERY
// Query: *[_type == "client"] {            _id,             name,             email,             phoneNumber        }
export type ALL_CLIENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  email: string | null;
  phoneNumber: string | null;
}>;

// Source: ./src/sanity/lib/projects/getAllProjects.ts
// Variable: ALL_PROJECTS_QUERY
// Query: *[_type == "project"] {          _id,          name,          client,           startDate,           endDate,           stagesCompleted,           client->{            _id,             name,             email,             phone          }        }
export type ALL_PROJECTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  client: {
    _id: string;
    name: string | null;
    email: string | null;
    phone: null;
  } | null;
  startDate: string | null;
  endDate: string | null;
  stagesCompleted: Array<string> | null;
}>;

// Source: ./src/sanity/lib/projects/getProjectById.ts
// Variable: PROJECT_BY_ID_QUERY
// Query: *[_type == "project" && _id == $projectId] {          _id,          name,          client,           startDate,           endDate,           stagesCompleted,           client->{            _id,             name,             email,             phone          }        }
export type PROJECT_BY_ID_QUERYResult = Array<{
  _id: string;
  name: string | null;
  client: {
    _id: string;
    name: string | null;
    email: string | null;
    phone: null;
  } | null;
  startDate: string | null;
  endDate: string | null;
  stagesCompleted: Array<string> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n        *[_type == "client"] {\n            _id, \n            name, \n            email, \n            phoneNumber\n        }\n  ': ALL_CLIENTS_QUERYResult;
    '\n        *[_type == "project"] {\n          _id,\n          name,\n          client, \n          startDate, \n          endDate, \n          stagesCompleted, \n          client->{\n            _id, \n            name, \n            email, \n            phone\n          }\n        }\n  ': ALL_PROJECTS_QUERYResult;
    '\n        *[_type == "project" && _id == $projectId] {\n          _id,\n          name,\n          client, \n          startDate, \n          endDate, \n          stagesCompleted, \n          client->{\n            _id, \n            name, \n            email, \n            phone\n          }\n        }\n  ': PROJECT_BY_ID_QUERYResult;
  }
}
