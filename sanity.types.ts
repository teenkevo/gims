/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Revision = {
  _id: string;
  _type: "revision";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  number?: string;
  notes?: string;
};

export type OtherItem = {
  _type: "otherItem";
  type?: "mobilization" | "reporting";
  activity?: string;
  unitPrice?: number;
  quantity?: number;
  lineTotal?: number;
};

export type ServiceItem = {
  _type: "serviceItem";
  service?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "service";
  };
  unitPrice?: number;
  quantity?: number;
  lineTotal?: number;
  testMethod?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "testMethod";
  };
};

export type Rfi = {
  _id: string;
  _type: "rfi";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  initiationType?:
    | "internal_internal"
    | "internal_external"
    | "external_internal";
  project?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "client";
  };
  labInitiator?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
  labReceiver?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
  labInitiatorExternal?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
  clientReceiver?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contactPerson";
  };
  clientInitiator?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contactPerson";
  };
  labReceiverExternal?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
  subject?: string;
  description?: string;
  attachments?: Array<string>;
  status?: "open" | "in_progress" | "resolved";
  conversation?: Array<{
    message?: string;
    sentByClient?: boolean;
    clientSender?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "contactPerson";
    };
    labSender?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "personnel";
    };
    attachments?: Array<string>;
    timestamp?: string;
    _key: string;
  }>;
  dateSubmitted?: string;
  dateResolved?: string;
};

export type LabApprovalWorkflow = {
  _id: string;
  _type: "labApprovalWorkflow";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  lab?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lab";
  };
  workflowType?:
    | "equipment_release_approval"
    | "test_result_approval"
    | "lab_access_approval"
    | "sop_change_approval";
  initiatedBy?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
  approvalSteps?: Array<{
    approver?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "personnel";
    };
    decision?: "pending" | "approved" | "rejected";
    approvalDate?: string;
    notes?: string;
    _key: string;
  }>;
  finalDecision?: "pending" | "approved" | "rejected";
  finalDecisionDate?: string;
  status?: "pending" | "in_progress" | "approved" | "rejected";
};

export type MaintenanceLog = {
  _id: string;
  _type: "maintenanceLog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  equipment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "equipment";
  };
  date?: string;
  supervisedBy?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
  maintenanceType?: "routine" | "repair" | "calibration" | "replacement";
  maintenanceNotes?: string;
  maintenanceCompany?: {
    companyName?: string;
    contactPerson?: string;
    contactEmail?: string;
    contactPhone?: string;
  };
};

export type Equipment = {
  _id: string;
  _type: "equipment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  serialNumber?: string;
  status?: "available" | "in_use" | "under_maintenance" | "retired";
  lastMaintenance?: string;
  nextMaintenance?: string;
  assignedPersonnel?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "personnel";
  }>;
  userManuals?: Array<string>;
  supplier?: {
    name?: string;
    contactPerson?: string;
    contactEmail?: string;
    contactPhone?: string;
  };
  maintenanceCompany?: {
    companyName?: string;
    contactPerson?: string;
    contactEmail?: string;
    contactPhone?: string;
  };
};

export type Lab = {
  _id: string;
  _type: "lab";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  labSection?:
    | "soil_testing"
    | "rock_testing"
    | "seismic_testing"
    | "asphalt_lab"
    | "concrete_testing"
    | "general_materials";
  status?: "available" | "under_maintenance" | "retired" | "fullCapacity";
  location?: string;
  capacity?: number;
  personnel?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "personnel";
  }>;
  labHead?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
  equipment?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "equipment";
  }>;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
  sopDocuments?: Array<{
    category?:
      | "health_safety"
      | "evacuation"
      | "quality_control"
      | "equipment_handling"
      | "general_operations";
    documentUrl?: string;
    description?: string;
    _key: string;
  }>;
};

export type FeedbackAction = {
  _id: string;
  _type: "feedbackAction";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  action?: string;
  description?: string;
  assignedTo?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "personnel";
  }>;
  dueDate?: string;
  status?: "pending" | "completed";
  reviewedBy?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "personnel";
  };
};

export type Personnel = {
  _id: string;
  _type: "personnel";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fullName?: string;
  roleSet?: Array<string>;
  email?: string;
  phone?: string;
  departments?: Array<string>;
  projects?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
};

export type ClientFeedback = {
  _id: string;
  _type: "clientFeedback";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "client";
  };
  contactPerson?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contactPerson";
  };
  date?: string;
  feedback?: Array<{
    category?:
      | "enquiry"
      | "sampleHandling"
      | "testQuality"
      | "technicalKnowledge"
      | "deliveryTime"
      | "presentation"
      | "complaintHandling";
    rating?: "Excellent" | "Good" | "Satisfactory" | "Average" | "Poor";
    comments?: string;
    _key: string;
  }>;
  suggestions?: string;
  actionNeeded?: boolean;
  actions?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "feedbackAction";
  }>;
};

export type ContactPerson = {
  _id: string;
  _type: "contactPerson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  designation?: string;
  phone?: string;
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "client";
  };
};

export type Client = {
  _id: string;
  _type: "client";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  internalId?: string;
  name?: string;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  internalId?: string;
  name?: string;
  priority?: "noPriority" | "urgent" | "high" | "medium" | "low";
  startDate?: string;
  endDate?: string;
  projectPersonnel?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "personnel";
  }>;
  projectSupervisors?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "personnel";
  }>;
  clients?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "client";
  }>;
  contactPersons?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "contactPerson";
  }>;
  stagesCompleted?: Array<string>;
  quotation?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "quotation";
  };
};

export type Quotation = {
  _id: string;
  _type: "quotation";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  quotationNumber?: string;
  revisionNumber?: string;
  acquisitionNumber?: string;
  quotationDate?: string;
  currency?: "usd" | "eur" | "gbp" | "ugx";
  items?: Array<
    {
      _key: string;
    } & ServiceItem
  >;
  otherItems?: Array<
    {
      _key: string;
    } & OtherItem
  >;
  vatPercentage?: number;
  paymentNotes?: string;
  revisions?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "quotation";
  }>;
  file?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
  status?: "draft" | "sent" | "accepted" | "rejected" | "invoiced" | "paid";
  rejectionNotes?: string;
  invoice?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "invoice";
  };
};

export type Invoice = {
  _id: string;
  _type: "invoice";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  invoiceNumber?: string;
  invoiceDate?: string;
  currency?: "usd" | "eur" | "gbp" | "ugx";
  items?: Array<
    {
      _key: string;
    } & ServiceItem
  >;
  otherItems?: Array<
    {
      _key: string;
    } & OtherItem
  >;
  vatPercentage?: number;
  paymentNotes?: string;
  file?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  code?: string;
  testParameter?: string;
  testMethods?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testMethod";
  }>;
  sampleClass?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sampleClass";
  };
  status?: "active" | "inactive";
};

export type FieldTest = {
  _id: string;
  _type: "fieldTest";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  code?: string;
  testParameter?: string;
  testMethods?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testMethod";
  }>;
  status?: "active" | "inactive";
};

export type LabTest = {
  _id: string;
  _type: "labTest";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  code?: string;
  testParameter?: string;
  testMethods?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testMethod";
  }>;
  sampleClass?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sampleClass";
  };
  status?: "active" | "inactive";
};

export type TestMethod = {
  _id: string;
  _type: "testMethod";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  standard?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "standard";
  };
  code?: string;
  description?: string;
  documents?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    name?: string;
    _type: "file";
    _key: string;
  }>;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SampleClass = {
  _id: string;
  _type: "sampleClass";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  subclasses?: Array<{
    name?: string;
    key?: string;
    _type: "subclass";
    _key: string;
  }>;
};

export type Standard = {
  _id: string;
  _type: "standard";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  acronym?: string;
  description?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | Revision
  | OtherItem
  | ServiceItem
  | Rfi
  | LabApprovalWorkflow
  | MaintenanceLog
  | Equipment
  | Lab
  | FeedbackAction
  | Personnel
  | ClientFeedback
  | ContactPerson
  | Client
  | Project
  | Quotation
  | Invoice
  | Service
  | FieldTest
  | LabTest
  | TestMethod
  | SanityFileAsset
  | SanityAssetSourceData
  | SampleClass
  | Standard;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/clients/getAllClients.ts
// Variable: ALL_CLIENTS_QUERY
// Query: *[_type == "client"] {      _id,      name,      internalId,      // Reverse‐lookup: find projects that reference this client      "projects": *[        _type == "project"         && references(^._id)      ] {        _id,        name,        internalId,        endDate      }    }
export type ALL_CLIENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  internalId: string | null;
  projects: Array<{
    _id: string;
    name: string | null;
    internalId: string | null;
    endDate: string | null;
  }>;
}>;

// Source: ./src/sanity/lib/clients/getAllContacts.ts
// Variable: ALL_CONTACTS_QUERY
// Query: *[_type == "contactPerson"] {            _id,             name,            email,            designation,            phone,            client->{              _id,            },        }
export type ALL_CONTACTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  email: string | null;
  designation: string | null;
  phone: string | null;
  client: {
    _id: string;
  } | null;
}>;

// Source: ./src/sanity/lib/clients/getClientById.ts
// Variable: CLIENT_BY_ID_QUERY
// Query: *[_type == "client" && _id == $clientId] {            _id,            name,            internalId,            // Reverse‐lookup: find projects that reference this client            "projects": *[                _type == "project"                 && references(^._id)            ] {              _id,              internalId,              name,              startDate,               endDate,               stagesCompleted,               clients[]->{                _id,                 name,                internalId              },              quotation->{                _id,                revisionNumber,                currency,                status,                rejectionNotes,                revisions[]->|order(revisionNumber desc){                  _id,                  revisionNumber,                  currency,                  status,                  rejectionNotes,                  items[] {                    lineTotal,                  },                  otherItems[] {                    lineTotal,                  },                  vatPercentage,                },                items[] {                  lineTotal,                },                otherItems[] {                  lineTotal,                },                vatPercentage,              }            },            "contacts": *[_type == "contactPerson" && references(^._id)] {                _id,                name,                email,                designation,                phone,                "projects": *[_type == "project" && references(^._id)] {                    _id,                    name,                }            }        }
export type CLIENT_BY_ID_QUERYResult = Array<{
  _id: string;
  name: string | null;
  internalId: string | null;
  projects: Array<{
    _id: string;
    internalId: string | null;
    name: string | null;
    startDate: string | null;
    endDate: string | null;
    stagesCompleted: Array<string> | null;
    clients: Array<{
      _id: string;
      name: string | null;
      internalId: string | null;
    }> | null;
    quotation: {
      _id: string;
      revisionNumber: string | null;
      currency: "eur" | "gbp" | "ugx" | "usd" | null;
      status:
        | "accepted"
        | "draft"
        | "invoiced"
        | "paid"
        | "rejected"
        | "sent"
        | null;
      rejectionNotes: string | null;
      revisions: Array<{
        _id: string;
        revisionNumber: string | null;
        currency: "eur" | "gbp" | "ugx" | "usd" | null;
        status:
          | "accepted"
          | "draft"
          | "invoiced"
          | "paid"
          | "rejected"
          | "sent"
          | null;
        rejectionNotes: string | null;
        items: Array<{
          lineTotal: number | null;
        }> | null;
        otherItems: Array<{
          lineTotal: number | null;
        }> | null;
        vatPercentage: number | null;
      }> | null;
      items: Array<{
        lineTotal: number | null;
      }> | null;
      otherItems: Array<{
        lineTotal: number | null;
      }> | null;
      vatPercentage: number | null;
    } | null;
  }>;
  contacts: Array<{
    _id: string;
    name: string | null;
    email: string | null;
    designation: string | null;
    phone: string | null;
    projects: Array<{
      _id: string;
      name: string | null;
    }>;
  }>;
}>;

// Source: ./src/sanity/lib/projects/getAllProjects.ts
// Variable: ALL_PROJECTS_QUERY
// Query: *[_type == "project"] | order(internalId desc) {          _id,          internalId,          name,          startDate,           endDate,           stagesCompleted,           clients[]->{            _id,             name,            internalId          },          quotation->{            _id,            revisionNumber,            currency,            status,            rejectionNotes,            revisions[]->|order(revisionNumber desc){              _id,              revisionNumber,              currency,              status,              rejectionNotes,              items[] {                lineTotal,              },              otherItems[] {                lineTotal,              },              vatPercentage,            },            items[] {              lineTotal,            },            otherItems[] {              lineTotal,            },            vatPercentage,          }        }
export type ALL_PROJECTS_QUERYResult = Array<{
  _id: string;
  internalId: string | null;
  name: string | null;
  startDate: string | null;
  endDate: string | null;
  stagesCompleted: Array<string> | null;
  clients: Array<{
    _id: string;
    name: string | null;
    internalId: string | null;
  }> | null;
  quotation: {
    _id: string;
    revisionNumber: string | null;
    currency: "eur" | "gbp" | "ugx" | "usd" | null;
    status:
      | "accepted"
      | "draft"
      | "invoiced"
      | "paid"
      | "rejected"
      | "sent"
      | null;
    rejectionNotes: string | null;
    revisions: Array<{
      _id: string;
      revisionNumber: string | null;
      currency: "eur" | "gbp" | "ugx" | "usd" | null;
      status:
        | "accepted"
        | "draft"
        | "invoiced"
        | "paid"
        | "rejected"
        | "sent"
        | null;
      rejectionNotes: string | null;
      items: Array<{
        lineTotal: number | null;
      }> | null;
      otherItems: Array<{
        lineTotal: number | null;
      }> | null;
      vatPercentage: number | null;
    }> | null;
    items: Array<{
      lineTotal: number | null;
    }> | null;
    otherItems: Array<{
      lineTotal: number | null;
    }> | null;
    vatPercentage: number | null;
  } | null;
}>;

// Source: ./src/sanity/lib/projects/getProjectById.ts
// Variable: PROJECT_BY_ID_QUERY
// Query: *[_type == "project" && _id == $projectId] {          _id,          internalId,          name,           startDate,           endDate,           stagesCompleted,           contactPersons[]->{            _id,            name,            email,            phone,            designation,            client->{              _id,            },          },          clients[]->{            _id,             name,          },          quotation->{            _id,            revisionNumber,            quotationNumber,            quotationDate,            acquisitionNumber,            currency,            status,            rejectionNotes,            revisions[]->|order(revisionNumber desc){              _id,              revisionNumber,              quotationNumber,              quotationDate,              acquisitionNumber,              currency,              status,              rejectionNotes,              items[] {                service,                unitPrice,                quantity,                lineTotal,                testMethod->{                  _id,                  standard->{                    _id,                    acronym,                  },                },              },              otherItems[] {                type,                activity,                unitPrice,                quantity,                lineTotal,              },              vatPercentage,              paymentNotes,              file {                asset->{                  _id,                  url,                  originalFilename,                  size,                  mimeType,                },              },            },            items[] {              service,              unitPrice,              quantity,              lineTotal,              testMethod->{                _id,                standard->{                  _id,                  acronym,                },              },            },            otherItems[] {              type,              activity,              unitPrice,              quantity,              lineTotal,            },            vatPercentage,            paymentNotes,            file {              asset->{                _id,                url,                originalFilename,                size,                mimeType,              },            },          }        }
export type PROJECT_BY_ID_QUERYResult = Array<{
  _id: string;
  internalId: string | null;
  name: string | null;
  startDate: string | null;
  endDate: string | null;
  stagesCompleted: Array<string> | null;
  contactPersons: Array<{
    _id: string;
    name: string | null;
    email: string | null;
    phone: string | null;
    designation: string | null;
    client: {
      _id: string;
    } | null;
  }> | null;
  clients: Array<{
    _id: string;
    name: string | null;
  }> | null;
  quotation: {
    _id: string;
    revisionNumber: string | null;
    quotationNumber: string | null;
    quotationDate: string | null;
    acquisitionNumber: string | null;
    currency: "eur" | "gbp" | "ugx" | "usd" | null;
    status:
      | "accepted"
      | "draft"
      | "invoiced"
      | "paid"
      | "rejected"
      | "sent"
      | null;
    rejectionNotes: string | null;
    revisions: Array<{
      _id: string;
      revisionNumber: string | null;
      quotationNumber: string | null;
      quotationDate: string | null;
      acquisitionNumber: string | null;
      currency: "eur" | "gbp" | "ugx" | "usd" | null;
      status:
        | "accepted"
        | "draft"
        | "invoiced"
        | "paid"
        | "rejected"
        | "sent"
        | null;
      rejectionNotes: string | null;
      items: Array<{
        service: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "service";
        } | null;
        unitPrice: number | null;
        quantity: number | null;
        lineTotal: number | null;
        testMethod: {
          _id: string;
          standard: {
            _id: string;
            acronym: string | null;
          } | null;
        } | null;
      }> | null;
      otherItems: Array<{
        type: "mobilization" | "reporting" | null;
        activity: string | null;
        unitPrice: number | null;
        quantity: number | null;
        lineTotal: number | null;
      }> | null;
      vatPercentage: number | null;
      paymentNotes: string | null;
      file: {
        asset: {
          _id: string;
          url: string | null;
          originalFilename: string | null;
          size: number | null;
          mimeType: string | null;
        } | null;
      } | null;
    }> | null;
    items: Array<{
      service: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "service";
      } | null;
      unitPrice: number | null;
      quantity: number | null;
      lineTotal: number | null;
      testMethod: {
        _id: string;
        standard: {
          _id: string;
          acronym: string | null;
        } | null;
      } | null;
    }> | null;
    otherItems: Array<{
      type: "mobilization" | "reporting" | null;
      activity: string | null;
      unitPrice: number | null;
      quantity: number | null;
      lineTotal: number | null;
    }> | null;
    vatPercentage: number | null;
    paymentNotes: string | null;
    file: {
      asset: {
        _id: string;
        url: string | null;
        originalFilename: string | null;
        size: number | null;
        mimeType: string | null;
      } | null;
    } | null;
  } | null;
}>;

// Source: ./src/sanity/lib/services/getAllSampleClasses.ts
// Variable: ALL_SAMPLE_CLASSES_QUERY
// Query: *[_type == "sampleClass"] {            _id,             name,            description,            subclasses[] {                name,                key            }        }
export type ALL_SAMPLE_CLASSES_QUERYResult = Array<{
  _id: string;
  name: string | null;
  description: string | null;
  subclasses: Array<{
    name: string | null;
    key: string | null;
  }> | null;
}>;

// Source: ./src/sanity/lib/services/getAllServices.ts
// Variable: ALL_SERVICES_QUERY
// Query: *[_type == "service"] {            _id,             status,            code,            testParameter,            testMethods[] -> {                _id,                code,                description,                standard -> {                    _id,                    name,                    acronym                }            },            sampleClass -> {                _id,                name,                description            },                    }
export type ALL_SERVICES_QUERYResult = Array<{
  _id: string;
  status: "active" | "inactive" | null;
  code: string | null;
  testParameter: string | null;
  testMethods: Array<{
    _id: string;
    code: string | null;
    description: string | null;
    standard: {
      _id: string;
      name: string | null;
      acronym: string | null;
    } | null;
  }> | null;
  sampleClass: {
    _id: string;
    name: string | null;
    description: string | null;
  } | null;
}>;

// Source: ./src/sanity/lib/services/getAllStandards.ts
// Variable: ALL_STANDARDS_QUERY
// Query: *[_type == "standard"] {            _id,             name,            acronym,            description        }
export type ALL_STANDARDS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  acronym: string | null;
  description: string | null;
}>;

// Source: ./src/sanity/lib/services/getAllTestMethods.ts
// Variable: ALL_TEST_METHODS_QUERY
// Query: *[_type == "testMethod"] {            _id,             code,            description,            standard -> {                _id,                name,                acronym            },            documents[] {              _key,              asset->{                _id,                url,                originalFilename,                size,                mimeType,              },              name            }        }
export type ALL_TEST_METHODS_QUERYResult = Array<{
  _id: string;
  code: string | null;
  description: string | null;
  standard: {
    _id: string;
    name: string | null;
    acronym: string | null;
  } | null;
  documents: Array<{
    _key: string;
    asset: {
      _id: string;
      url: string | null;
      originalFilename: string | null;
      size: number | null;
      mimeType: string | null;
    } | null;
    name: string | null;
  }> | null;
}>;

// Source: ./src/sanity/lib/services/getSampleClassById.ts
// Variable: SAMPLE_CLASS_BY_ID_QUERY
// Query: *[_type == "sampleClass" && _id == $sampleClassId] {          _id,           name,          description,          subclasses[] {              name,              key          }        }
export type SAMPLE_CLASS_BY_ID_QUERYResult = Array<{
  _id: string;
  name: string | null;
  description: string | null;
  subclasses: Array<{
    name: string | null;
    key: string | null;
  }> | null;
}>;

// Source: ./src/sanity/lib/services/getServiceById.ts
// Variable: SERVICE_BY_ID_QUERY
// Query: *[_type == "service" && _id == $serviceId] {            _id,             code,            testParameter,            testMethods[] -> {                _id,                code,                description,                standard -> {                    _id,                    name,                    acronym                },                documents[] {                  _key,                  asset->{                    url,                    originalFilename,                    size,                    mimeType,                  }                }              },            sampleClass -> {                _id,                name,                description            },            status        }
export type SERVICE_BY_ID_QUERYResult = Array<{
  _id: string;
  code: string | null;
  testParameter: string | null;
  testMethods: Array<{
    _id: string;
    code: string | null;
    description: string | null;
    standard: {
      _id: string;
      name: string | null;
      acronym: string | null;
    } | null;
    documents: Array<{
      _key: string;
      asset: {
        url: string | null;
        originalFilename: string | null;
        size: number | null;
        mimeType: string | null;
      } | null;
    }> | null;
  }> | null;
  sampleClass: {
    _id: string;
    name: string | null;
    description: string | null;
  } | null;
  status: "active" | "inactive" | null;
}>;

// Source: ./src/sanity/lib/services/getStandardById.ts
// Variable: STANDARD_BY_ID_QUERY
// Query: *[_type == "standard" && _id == $standardId] {            _id,             name,            acronym,            description        }
export type STANDARD_BY_ID_QUERYResult = Array<{
  _id: string;
  name: string | null;
  acronym: string | null;
  description: string | null;
}>;

// Source: ./src/sanity/lib/services/getTestMethodById.ts
// Variable: TEST_METHOD_BY_ID_QUERY
// Query: *[_type == "testMethod" && _id == $testMethodId] {            _id,             code,            description,            standard -> {                _id,                name,                acronym            },            documents[] {              _key,              asset->{                _id,                url,                originalFilename,                size,                mimeType,              },              name            }        }
export type TEST_METHOD_BY_ID_QUERYResult = Array<{
  _id: string;
  code: string | null;
  description: string | null;
  standard: {
    _id: string;
    name: string | null;
    acronym: string | null;
  } | null;
  documents: Array<{
    _key: string;
    asset: {
      _id: string;
      url: string | null;
      originalFilename: string | null;
      size: number | null;
      mimeType: string | null;
    } | null;
    name: string | null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n    *[_type == "client"] {\n      _id,\n      name,\n      internalId,\n      // Reverse\u2010lookup: find projects that reference this client\n      "projects": *[\n        _type == "project" \n        && references(^._id)\n      ] {\n        _id,\n        name,\n        internalId,\n        endDate\n      }\n    }\n  ': ALL_CLIENTS_QUERYResult;
    '\n        *[_type == "contactPerson"] {\n            _id, \n            name,\n            email,\n            designation,\n            phone,\n            client->{\n              _id,\n            },\n\n        }\n  ': ALL_CONTACTS_QUERYResult;
    '\n        *[_type == "client" && _id == $clientId] {\n            _id,\n            name,\n            internalId,\n            // Reverse\u2010lookup: find projects that reference this client\n            "projects": *[\n                _type == "project" \n                && references(^._id)\n            ] {\n              _id,\n              internalId,\n              name,\n              startDate, \n              endDate, \n              stagesCompleted, \n              clients[]->{\n                _id, \n                name,\n                internalId\n              },\n              quotation->{\n                _id,\n                revisionNumber,\n                currency,\n                status,\n                rejectionNotes,\n                revisions[]->|order(revisionNumber desc){\n                  _id,\n                  revisionNumber,\n                  currency,\n                  status,\n                  rejectionNotes,\n                  items[] {\n                    lineTotal,\n                  },\n                  otherItems[] {\n                    lineTotal,\n                  },\n                  vatPercentage,\n                },\n                items[] {\n                  lineTotal,\n                },\n                otherItems[] {\n                  lineTotal,\n                },\n                vatPercentage,\n              }\n            },\n            "contacts": *[_type == "contactPerson" && references(^._id)] {\n                _id,\n                name,\n                email,\n                designation,\n                phone,\n                "projects": *[_type == "project" && references(^._id)] {\n                    _id,\n                    name,\n                }\n            }\n        }\n  ': CLIENT_BY_ID_QUERYResult;
    '\n        *[_type == "project"] | order(internalId desc) {\n          _id,\n          internalId,\n          name,\n          startDate, \n          endDate, \n          stagesCompleted, \n          clients[]->{\n            _id, \n            name,\n            internalId\n          },\n          quotation->{\n            _id,\n            revisionNumber,\n            currency,\n            status,\n            rejectionNotes,\n            revisions[]->|order(revisionNumber desc){\n              _id,\n              revisionNumber,\n              currency,\n              status,\n              rejectionNotes,\n              items[] {\n                lineTotal,\n              },\n              otherItems[] {\n                lineTotal,\n              },\n              vatPercentage,\n            },\n            items[] {\n              lineTotal,\n            },\n            otherItems[] {\n              lineTotal,\n            },\n            vatPercentage,\n          }\n        }\n  ': ALL_PROJECTS_QUERYResult;
    '\n        *[_type == "project" && _id == $projectId] {\n          _id,\n          internalId,\n          name, \n          startDate, \n          endDate, \n          stagesCompleted, \n          contactPersons[]->{\n            _id,\n            name,\n            email,\n            phone,\n            designation,\n            client->{\n              _id,\n            },\n          },\n          clients[]->{\n            _id, \n            name,\n          },\n          quotation->{\n            _id,\n            revisionNumber,\n            quotationNumber,\n            quotationDate,\n            acquisitionNumber,\n            currency,\n            status,\n            rejectionNotes,\n            revisions[]->|order(revisionNumber desc){\n              _id,\n              revisionNumber,\n              quotationNumber,\n              quotationDate,\n              acquisitionNumber,\n              currency,\n              status,\n              rejectionNotes,\n              items[] {\n                service,\n                unitPrice,\n                quantity,\n                lineTotal,\n                testMethod->{\n                  _id,\n                  standard->{\n                    _id,\n                    acronym,\n                  },\n                },\n              },\n              otherItems[] {\n                type,\n                activity,\n                unitPrice,\n                quantity,\n                lineTotal,\n              },\n              vatPercentage,\n              paymentNotes,\n              file {\n                asset->{\n                  _id,\n                  url,\n                  originalFilename,\n                  size,\n                  mimeType,\n                },\n              },\n            },\n            items[] {\n              service,\n              unitPrice,\n              quantity,\n              lineTotal,\n              testMethod->{\n                _id,\n                standard->{\n                  _id,\n                  acronym,\n                },\n              },\n            },\n            otherItems[] {\n              type,\n              activity,\n              unitPrice,\n              quantity,\n              lineTotal,\n            },\n            vatPercentage,\n            paymentNotes,\n            file {\n              asset->{\n                _id,\n                url,\n                originalFilename,\n                size,\n                mimeType,\n              },\n            },\n          }\n        }\n  ': PROJECT_BY_ID_QUERYResult;
    '\n        *[_type == "sampleClass"] {\n            _id, \n            name,\n            description,\n            subclasses[] {\n                name,\n                key\n            }\n        }\n  ': ALL_SAMPLE_CLASSES_QUERYResult;
    '\n        *[_type == "service"] {\n            _id, \n            status,\n            code,\n            testParameter,\n            testMethods[] -> {\n                _id,\n                code,\n                description,\n                standard -> {\n                    _id,\n                    name,\n                    acronym\n                }\n            },\n            sampleClass -> {\n                _id,\n                name,\n                description\n            },\n            \n        }\n  ': ALL_SERVICES_QUERYResult;
    '\n        *[_type == "standard"] {\n            _id, \n            name,\n            acronym,\n            description\n        }\n  ': ALL_STANDARDS_QUERYResult;
    '\n        *[_type == "testMethod"] {\n            _id, \n            code,\n            description,\n            standard -> {\n                _id,\n                name,\n                acronym\n            },\n            documents[] {\n              _key,\n              asset->{\n                _id,\n                url,\n                originalFilename,\n                size,\n                mimeType,\n              },\n              name\n            }\n        }\n  ': ALL_TEST_METHODS_QUERYResult;
    '\n        *[_type == "sampleClass" && _id == $sampleClassId] {\n          _id, \n          name,\n          description,\n          subclasses[] {\n              name,\n              key\n          }\n        }\n  ': SAMPLE_CLASS_BY_ID_QUERYResult;
    '\n        *[_type == "service" && _id == $serviceId] {\n            _id, \n            code,\n            testParameter,\n            testMethods[] -> {\n                _id,\n                code,\n                description,\n                standard -> {\n                    _id,\n                    name,\n                    acronym\n                },\n                documents[] {\n                  _key,\n                  asset->{\n                    url,\n                    originalFilename,\n                    size,\n                    mimeType,\n                  }\n                }  \n            },\n            sampleClass -> {\n                _id,\n                name,\n                description\n            },\n            status\n        }\n  ': SERVICE_BY_ID_QUERYResult;
    '\n        *[_type == "standard" && _id == $standardId] {\n            _id, \n            name,\n            acronym,\n            description\n        }\n  ': STANDARD_BY_ID_QUERYResult;
    '\n        *[_type == "testMethod" && _id == $testMethodId] {\n            _id, \n            code,\n            description,\n            standard -> {\n                _id,\n                name,\n                acronym\n            },\n            documents[] {\n              _key,\n              asset->{\n                _id,\n                url,\n                originalFilename,\n                size,\n                mimeType,\n              },\n              name\n            }\n        }\n  ': TEST_METHOD_BY_ID_QUERYResult;
  }
}
